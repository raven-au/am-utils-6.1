# -*- text -*-
# This file is README.autofs
# am-utils-6.1
# Erez Zadok <ezk@cs.columbia.edu> a.k.a. "The Lord of Darkness"
#
# modified by
# Ion Badulescu <ib42@cs.columbia.edu> a.k.a. "The Autofs Master"

** General notes about the autofs support in am-utils

The autofs code in am-utils is beta quality for Linux and alpha quality for
all the other systems.

* Caveats:

- amd acts as *both* /usr/lib/autofs/automountd and /usr/sbin/automount.
There's no way to distinguish the two.  When amd starts, it first registers
itself as an autofs server (automountd's job), then parses its own maps, and
decides on which autofs-type mounts to make (automount's job).  After the
autofs mounts are made, amd listens for requests from the kernel-based
autofs, and acts upon them.

- Linux support is available and fairly stable. Solaris 2.[67] support is in
incipient stages, and 2.5.1 is even further away. Irix autofs support will
probably be very easy once we get Solaris 2.5.1 to work, as they use the
same protocol and almost identical data structures. Solaris 8 will not work,
it uses yet another version of the autofs protocol.

- Mixing autofs and normal amd mount points in the same amd.conf file works.

- Killing amd can become a problem if there are active mounts. Since mounts
are done "in place", we can't just unmount our mount points and go away. For
now, amd simply tells the kernel it's dying; we need to think this further.

* Solaris:

- Amd w/ autofs mounts will *not* while Sun's automounterd is running.

- Browsing is possible with Solaris 2.6+, but it's not implemented yet.

- Direct mounts are possible, but completely untested. Amd will currently
  refuse to use autofs with direct maps.

- Restarting autofs mounts is possible, but not implemented.

* Linux:

- amd should work fine even when the Linux automounter is running, the
mechanism being used prevents any kind of (evil) interaction between them.

- Browsing is unavailable if autofs support is used, due to limitations in
the kernel-daemon protocol. We expect to have browsing support in Solaris 2.6+
and maybe in later Linux versions (2.2.x and 2.4.x do NOT support browsing).

- I didn't catch all the places where amd decides to stop working on a
mount, either on success or on failure. Since the kernel needs to be
notified about the status of its request, this means that certain requests
will just hang indefinitely. Fortunately they are interruptible, Ctrl-C will
get you out of them. Right now I personally can't trigger such hangs
anymore, but if you can (and can reproduce it), please let me know asap.

- Toplvl and auto maps certainly support autofs mounting, that's what I
tested with. Host maps are supported with autofs4 (in Linux 2.3+), although
without browsing they won't be very useful. Direct maps cannot be supported
since there is no kernel support for them; we might be able to get something
eventually, but don't hold your breath. Inherit doesn't make much sense as
long as we can't restart a hung autofs mount point. Link works (tested);
nfsx, nfsl, linkx should work, but are not tested.

- While implementing autofs support for auto maps, I found what I think is a
bug, either in the code or in the documentation. Anyway, the code and the
doc don't match. The doc says an auto map will get a prefix *only* if it's
explicitly specified in the map. The code, on the other hand, will add a
default prefix if one isn't specified, and the default prefix is the mount
point of the auto map. Something needs to get fixed, I guess... -Ion

* amd.conf requirements:

To tell amd to use an autofs-style mount point and mounts for a map, add

	mount_type = autofs

either to the global section, or to the sections of the individual maps you
selected.

* Map changes:

No changes are necessary. If a map is marked as autofs in amd.conf, mounts
are done "in place" and the "fs" parameter is simply ignored.

Note that this implementation of autofs is still mostly infant.

For example, in the past, /home/ezk would be a symlink to /n/shekel/u/zing,
which is where shekel:/n/shekel/u/zing was mounted on.  It's still a symlink
with autofs; this *will* change with the "bind" mount option in Linux
2.4+. We could also not use symlinks and use loop/null/wrapfs mounts
instead, but that's kind of ugly. As always, an amd.conf flag is a definite
posibility for deciding which behavior to use.

* Todo:

We are looking for volunteers to improve the autofs code!

(1) These fixes are needed:

- the overlay option should be turned on for autofs mounts automatically,
without having to require it in the maps. [done]

- the 'fs' variable should be ignored in the maps of type autofs.  Rather,
it should always be set to "/${path}". [done]

- when the mount type is 'link', transparently translate it into a loopback
file system mount (lofs), that would mount in place, rather than supply a
symlink, at least on systems whose autofs doesn't support symlinks. Linux
does support symlinks, we're not sure about Solaris yet, the answer is
probably yes for 2.6+, no for 2.5.1 and for Irix as well. In any case, the
lofs mount is an ugly hack which doesn't scale very well, so we should avoid
it if at all possible.

- complain if certain incompatible options (autofs and ...) are used. Can't
think of any though.

- if amd is killed or dies, the autofs mounts will remain intact as required
(your system is _not_ hung, yay!)  However, if you restart amd, it will not
correctly 'restart' the autofs mounts as the Sun automounter does.  Rather,
it will cause another mount to happen, which leaves your /etc/mnttab
cluttered with older mounts entries which cannot be unmounted.

(2) Code expansion:

- [Solaris only] (conf/autofs/autofs_solaris2.c) autofs_readdir_2_req() is
not implemented at all.

- [Solaris only] implement the sockets version of amu_get_autofs_address()
and create_autofs_service(), in conf/transp/transp_sockets.c. Not sure if
it's necessary, Solaris it still biased towards TLI/STREAMS in userspace.

(3) Testing and porting to other systems:

- nothing has been tested on Irix, which reportedly has a similar
functioning autofs to Solaris 2.5.1. Given that Solaris 2.5.1 support is not
there yet, Irix won't work either.

- support for Linux autofs is fairly stable, we need testers!

- the new and improved autofs in Solaris 2.6+ is being worked on.

- did not test any version of Solaris on x86. Should work, but you have been
warned.
