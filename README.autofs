# -*- text -*-
# This file is README.autofs
# am-utils-6.0
# Erez Zadok <ezk@cs.columbia.edu>
#
# modified by
# Ion Badulescu <ib42@cs.columbia.edu>

** General notes about the autofs support in am-utils

The autofs code in am-utils is VERY much alpha quality!

* Caveats:

- amd acts as *both* /usr/lib/autofs/automountd and /usr/sbin/automount.
There's no way to distinguish the two.  When amd starts, it first registers
itself as an autofs server (automountd), then parses its maps, and decides
on which autofs type mounts to make (automount does that).  After the autofs
mounts are made, amd listens for requests from the kernel-based autofs, and
acts upon them.

- I only tested it under Solaris 2.5.1 (sparc).  Linux support is also
available, implemented and tested by Ion. Don't expect irix autofs support
any time soon.  Also, the autofs API in Solaris 2.6 is very different from
2.5.1; for now, am-utils does not even compile in the autofs code under
Solaris 2.6.

- I did not test mixed autofs and normal amd mount points in the same
amd.conf file, but it should work.

- Browsing is unavailable if autofs support is used, due to limitations in
the kernel-daemon protocol. We expect to have browsing support in Solaris 2.6
and later Linux versions (2.2.0 does NOT support browsing).


Solaris:

- I tested it as a separate amd process, which registered under an alternate
RPC number (300020).  (The multiple amd-support available in a9 really saved
the day.)

- I did not test amd running autofs mounts while Sun's automounter is
running.  I don't expect the interaction between the two to be good for your
health.


Linux:

- amd should work fine even when the Linux automounter is running, the
mechanism being used prevents any kind of (evil) interaction between them.

- I'm afraid I broke Solaris support rather badly while implementing Linux
support. While that's not a problem in the long run, since the whole thing
needed to be redesigned anyway, for now don't test autofs under Solaris. I
will fix it as soon as the Linux support is stable.

- Killing amd can become a problem if there are active mounts. Since mounts
are done "in place", we can't just unmount our mount points and go away. The
Linux port for now tells the kernel it's dying; we need to think this
further.

- I didn't catch all the places where amd decides to stop working on a
mount, either on success or on failure. Since the kernel needs to be
notified about the status of its request, this means that certain requests
will just hang indefinitely. Fortunately they are interruptible, Ctrl-C will
get you out of them. Right now I personally can't trigger such hangs
anymore, but if you can (and can reproduce it), please let me know asap.

- Only toplvl and auto maps support autofs mounting, for now. Host maps
should be easy, *although* without browsing they won't be very
useful. Direct maps.. don't ask -- I need to understand them myself
first :-). Inherit doesn't make much sense as long as we can't restart a hung
autofs mount point. Link works (tested); nfsx, nfsl, linkx should work, but
are not tested.

- Speaking of direct maps and understanding them: while implementing autofs
support for auto maps, I found what I think is a bug, either in the code or
in the documentation. Anyway, the code and the doc don't match. The doc says
an auto map will get a prefix *only* if it's explicitly specified in the
map. The code, on the other hand, will add a default prefix if one isn't
specified, and the default prefix is the mount point of the auto
map. Something needs to get fixed, I guess... -Ion

* amd.conf requirements:

To tell amd to use an autofs-style mount point and mounts for a map, turn on

	mount_type = autofs

in the map sections you wish.

* Map changes:

No changes are necessary. If a map is marked as autofs, mounts are done "in
place" and the "fs" parameter is simply ignored.

Note that this implementation of autofs is still infant.

For example, in the past, /home/ezk would be a symlink to /n/shekel/u/zing,
which is where shekel:/n/shekel/u/zing was mounted on.  But now /home/ezk is
a directory on which shekel:/n/shekel/u/zing is directly mounted upon.
(Yes, this means that finally $PWD is the same as `/bin/pwd`.)

* Todo:

I'm looking for volunteers to improve the autofs code!

(1) These fixes are needed to avoid having to change amd maps:

- the overlay option should be turned on for autofs mounts automatically,
without having to require it in the maps. [necessary?? not all OS's support
it anyway -Ion]

- the 'fs' variable should be ignored in the maps of type autofs.  Rather,
it should always be set to "/${path}". [done]

- when the mount type is 'link', transparently translate it into a loopback
file system mount (lofs), that would mount in place, rather than supply a
symlink, at least on systems whose autofs doesn't support symlinks. Linux
does support symlinks, we're not sure about Solaris yet. In any case, the
lofs mount is an ugly hack which doesn't scale very well, so we should avoid
it if at all possible.

- complain if certain incompatible options (autofs and ...) are used. Can't
think of any though.

- if amd is killed or dies, the autofs mounts will remain intact as required
(your system is _not_ hung, yay!)  However, if you restart amd, it will not
correctly 'restart' the autofs mounts as the Sun automounter does.  Rather,
it will cause another mount to happen, which leaves your /etc/mnttab
cluttered with older mounts entries which cannot be unmounted.

(2) Code expansion:

- [Solaris only] (amd/ops_autofs.c) autofs_unmount_1_svc() is not
implemented at all.

- [Solaris only] amd has many types of mount types which are not supported
with autofs.  Right now amd will assume a 'direct' mount.  Types which are
not supported are 'indirect', 'offset', and 'multiple' or 'hierarchical'.

- [Solaris only] implement the sockets version of amu_get_autofs_address()
and create_autofs_service(), in conf/transp/transp_sockets.c.

(3) Testing and porting to other systems:

- nothing has been tested on irix, which reportedly has a similar
functioning autofs to Solaris'.

- support linux autofs is in the works, we need testers once the code is a
bit more stable.

- did not test the new and improved autofs in Solaris 2.6 either.

- did not test Solaris 2.5.1 on x86, or earlier versions of Solaris on
either Sparc or x86. 

